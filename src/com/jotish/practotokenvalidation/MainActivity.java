package com.jotish.practotokenvalidation;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.graphics.Color;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {
	private TextView result;
	private EditText token_input;
	private Button validate;
	private ConnectionDetector cd;
   private int lag; // Lag b/w server time and system time 0 or else if no lag
   private final String SHARED_KEY="1234567"; //A key generated by User Action Let's say login activity 
   private final int LENGTH_OTP=5; //Length of OTP key
   private final int HASH_ALGORITHM=0; // Hash Algorithm to be used. SHA1
   JSONParser jsonParser = new JSONParser();
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		token_input=(EditText)findViewById(R.id.token_field);
        validate = (Button) findViewById(R.id.validate_button);
        result =(TextView) findViewById(R.id.result_msg);
        cd = new ConnectionDetector(getApplicationContext());
        if (!cd.isConnectingToInternet()) {
            // Internet Connection is not present
		    this.lag=0;
        } 
		  else
		  {
			  new TimeSync().execute();	  
			  
		  }  
        
        validate.setOnClickListener(new OnClickListener(){
        
    		@Override
    		public void onClick(View arg0) {
    			String token=token_input.getText().toString();
    			String msg="Some error";
    			result.setText("");
    			if (token.length()==5)
    			{
    			    
    				if(token.equals(TokenGenerator.gen(SHARED_KEY,LENGTH_OTP,HASH_ALGORITHM,lag)))
    				{
    					msg="Successfully validated!";
    					result.setTextColor(Color.parseColor("#00FF00"));
    				}	
    				else
    				{
    					msg="Try again! Prolly this token has expired!";
    					result.setTextColor(Color.parseColor("#FF0000"));
    				}	
    			}
    			else
    			{
    				msg="Please enter a valid 5 digit token";
    				result.setTextColor(Color.parseColor("#FF0000"));
    			}	
    			
    			result.setText(msg);
    			Toast.makeText(MainActivity.this,msg, Toast.LENGTH_SHORT).show();
				
    		}
    	});

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	
class TimeSync extends AsyncTask<String, String, String> {
		private long currentTime1;
		private long currentTime2;
		private long server_time;
		protected void onPreExecute() {
			currentTime1= (long) System.currentTimeMillis();
		}
		
		protected String doInBackground(String... args) {
			
		    String mode = "GET_SERVER_TIME";
		    
	     
			// Building Parameters
			List<NameValuePair> paramsLogin= new ArrayList<NameValuePair>();
			paramsLogin.add(new BasicNameValuePair("mode", mode));
			
	
			// getting JSON string from URL
			JSONObject jsonLogin = jsonParser.makeHttpRequest(ConnectionDetector.URL, "GET", paramsLogin);
			
			try {
				
				int status = jsonLogin.getInt("status");
				if(status==1)
				{
					currentTime2= (long) System.currentTimeMillis();
					server_time=jsonLogin.getLong("time");
					lag=(int) ((server_time + (currentTime2-currentTime1))-currentTime2);
					
				}	
				else
				 lag=0;	
				
			}
			catch (JSONException e) {
				
			}
			
		
			return null;
		}
		
		 protected void onPostExecute(String file_url) {
			 
	        	
		 }
		}
	
}
